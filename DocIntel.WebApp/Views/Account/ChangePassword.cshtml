@using DocIntel.Core.Helpers
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model DocIntel.WebApp.ViewModels.UserViewModel.ResetPasswordViewModel

@{
    ViewData["Title"] = $"Change your password";
}

<form asp-action="ResetPassword">
    <div class="subheader">
        <h1 class="subheader-title">
            <i class="fal fa-user subheader-icon"></i> @ViewData["Title"]
        </h1>
    </div>

    <div class="row">
        <div class="col-12">

            @{
                var errors = ViewData.ModelState.SelectMany(x => x.Value.Errors);
            }
            @if (errors.Any())
            {
                <div class="alert alert-danger" role="alert">
                    <strong>Oh snap!</strong> Change a few things up and try submitting again.

                    <ul class="mb-0 mt-1">
                        @foreach (var error in errors)
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }

            <div id="panel-basic" class="panel">
                <div class="panel-container show">
                    <div class="panel-content">
                        <input asp-for="UserId" type="hidden"/>
                        <input asp-for="Code" type="hidden"/>

                        <div class="form-group">
                            <label asp-for="Password" class="control-label"></label>
                            <input asp-for="Password" class="form-control"/>
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>

                        <div class="form-group">
                            <label asp-for="PasswordConfirmation" class="control-label"></label>
                            <input asp-for="PasswordConfirmation" class="form-control"/>
                            <span asp-validation-for="PasswordConfirmation" class="text-danger"></span>
                        </div>
                        
                        @if (Model.PasswordOptions != null)
                        {
                            <p>The password has to meet the following constraints:</p>
                            <ul>
                                <li>Length must be greater than @Model.PasswordOptions.RequiredLength characters.</li>
                                @(Model.PasswordOptions.RequireDigit ? Html.Raw("<li>Password must contain numbers.</li>"): "")
                                @(Model.PasswordOptions.RequireLowercase ? Html.Raw("<li>Password must contain lowercase letters.</li>"): "")
                                @(Model.PasswordOptions.RequireUppercase ? Html.Raw("<li>Password must contain uppercase letters.</li>"): "")
                                @(Model.PasswordOptions.RequiredUniqueChars > 0 ? Html.Raw("<li>Password must contain at last " + Model.PasswordOptions.RequiredUniqueChars + " unique characters.</li>"): "")
                                @(Model.PasswordOptions.RequireNonAlphanumeric ? Html.Raw("<li>Password must have at least one non-alphanumeric (e.g. @#$) symbol.</li>"): "")    
                            </ul>
                        }
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <button type="submit" class= "btn btn-pills btn-success btn-iconified waves-effect waves-themed">
                        <i class="fal fa-save"></i> Save
                    </button>
                    <a asp-action="Index" asp-controller="Home" class="ml-3 text-secondary">Cancel</a>
                </div>
            </div>
        </div>
    </div>
</form>




@section Scripts {

    <script type="text/javascript">

      function copyToClickBoard(content){      
          if (navigator && navigator.clipboard && navigator.clipboard.writeText) {
              navigator.clipboard.writeText(content)
                  .then(() => {
                  console.log("Text copied to clipboard...")
              })
                  .catch(err => {
                  console.log('Something went wrong', err);
              })
          }
          return false;
      }

    </script>

}